# Docker configuration
spring.application.name=Food-order-system
spring.main.allow-circular-references=true

# Database configuration
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://postgres:5432/food_order_system}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:postgres}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Flyway configuration
spring.flyway.enabled=true
spring.flyway.baseline-on-migrate=true
spring.flyway.baseline-version=0
spring.flyway.baseline-description=Initial baseline

# Server configuration
server.port=8080

# JWT configuration
jwt.secret=${JWT_SECRET:mySecretKeyForJWTGenerationWhichIsVeryLongAndSecure123456}
jwt.expiration=${JWT_EXPIRATION:86400000}

# Logging configuration
logging.level.com.example.foodordersystem=INFO
logging.level.org.springframework.security=WARN
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN

# OpenAPI configuration
app.openapi.dev-url=http://localhost:8080
app.openapi.prod-url=https://foodorder-api.com

# File upload configuration
spring.servlet.multipart.max-file-size=5MB
spring.servlet.multipart.max-request-size=5MB

# CORS configuration
app.cors.allowed-origins=http://localhost:3000,http://localhost:8081
app.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
app.cors.allowed-headers=*
app.cors.allow-credentials=true

# Actuator configuration
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=when-authorized